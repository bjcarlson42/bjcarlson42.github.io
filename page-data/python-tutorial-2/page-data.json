{"componentChunkName":"component---src-templates-blog-post-js","path":"/python-tutorial-2/","result":{"data":{"site":{"siteMetadata":{"title":"Benjamin Carlson"}},"markdownRemark":{"id":"3256722a-14dd-5ae8-b620-14875b44e988","excerpt":"Introduction Welcome back to the second post in the learn Python series! If you haven’t read the first post where we go over setting up a Python coding…","html":"<h2>Introduction</h2>\n<p>Welcome back to the second post in the learn Python series! If you haven’t read the first post where we go over setting up a Python coding environment on your local machine and write a simple “hello world program”, you can do so here. Also, remember that you can find all the code for this tutorial at my GitHub. Otherwise, let’s jump right into this tutorial.</p>\n<h2>Variables</h2>\n<p>Variables are elements that store a value. In programming this value may be user input that may change or a non changing value such as pi (3.14). In order to declare a variable in Python we type:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    x <span class=\"token operator\">=</span> <span class=\"token number\">10</span></code></pre></div>\n<p>This stores the value 10 in the variable “x”. Now, whenever we write x, the compiler will know see x as 10. For example let’s add the line: print(x).</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    x <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></code></pre></div>\n<p>When you run this program (remember to run we use the command ‘Python [program name]’ we see the number 10, not x. If we did…</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This would print the letter “x”. This is because in the second case, we used quotations (” ”). To Python, this is a string literal. In the first instance, we neglected the quotations. This tells Python that x must be a variable.</p>\n<p>You can even add variables directly in the print statement. For example if we type…</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We will see the output “15”. Try it out for yourself!</p>\n<h2>Commenting</h2>\n<p>If you want to, you can comment out the first print statement. You can do so by putting a ”#” in front of the line. This will comment that line of the code out and the compiler will pass over that code when run. Commenting is helpful in programming for many reasons. </p>\n<p>First, it helps with debugging and finding errors in your program. It also allows you to put information at the top of your program such as your name, the date, and a description of the program. This allows anyone looking at your program to understand what the program does, who wrote it, any anything else you might add. </p>\n<p>It is a good practice to comment lines of code that are complex to say what they do. Imagine you write 10 lines of code that are complex. If you come back 2 months from now or another developer looks at it, there is a good chance they won’t know exactly what that code does. Even if they have a decent understanding of what the code does, it is still helpful to add comments. For this reason, it is good practice to write comments often in your code. Take a look at an example with good commenting.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token comment\"># @author: Benjamin Carlson</span>\n    <span class=\"token comment\"># date: 11/6/19</span>\n    <span class=\"token comment\"># description: This program adds the variable x to the number 5 and prints the result</span>\n\n    x <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token comment\">#Assigned the value 10 to the variable x</span>\n    <span class=\"token comment\"># print(x)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#adds the variable x and 5 and prints the result</span></code></pre></div>\n<p>As you will notice, adding these comments does not change the output of the code. Normally you would not need to comment a simple print statement or variable declaration but for learning purposes, that is how it’s done.</p>\n<h2>Data Types</h2>\n<p>There are many different data types that Python allows us to use. We will cover a majority of the basic ones now.</p>\n<h3>Integers</h3>\n<p>Integers are self explanatory. Earlier in this article, we saw the code “x = 10”. 10 is an integer. In Python, there is no limit to how long an integer can be.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999999999999999999999</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>To see that this is an integer, we can type this:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We get a result of:</p>\n<div class=\"gatsby-highlight\" data-language=\"cmd\"><pre class=\"language-cmd\"><code class=\"language-cmd\">    &lt;class &#39;int&#39;&gt;</code></pre></div>\n<h3>Floating-Point Numbers</h3>\n<p>Next up are floating-point numbers. Python calls these values type float and are specified by a decimal point in the number.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    floating_point_number <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>floating_point_number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We see an output of:</p>\n<div class=\"gatsby-highlight\" data-language=\"cmd\"><pre class=\"language-cmd\"><code class=\"language-cmd\">    &lt;type &#39;float&#39;&gt;</code></pre></div>\n<h3>Strings</h3>\n<p>Next up are strings. Also called string literals, strings are either surrounded by single or double quotation marks. There is no difference between the two, just personal preference. Like integers, a string may be however long as you wish, even empty, as long as your machine has enough memory.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    my_string <span class=\"token operator\">=</span> <span class=\"token string\">\"hi\"</span>\n    my_string2 <span class=\"token operator\">=</span> <span class=\"token string\">'hello again'</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>my_string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i am a string'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Strings are arrays. As in many other languages, strings are arrays of bytes representing unicode characters. A single character is simply a string with a length of 1. Square brackets can be used to access elements of the string. This is also known as <a href=\"https://en.wikipedia.org/wiki/Index_notation\">indexing</a>{:target=“_blank”}.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_string2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_string2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Notice how the first letter (or first element of the array) is zero (0) and not one (1). This is known as zero-based numbering. This will be very important when we start working more with arrays.</p>\n<h4>Escape Sequences</h4>\n<p>An escape sequence is a sequence of characters that does not represent itself when used inside a character or string literal. Instead, it is translated into something else, such as another character or sequence that otherwise can’t be represented. In Python, a backslash character in a string indicates that one or more characters that follow it should be treated specially. For example take a look at the code below.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I don'</span>t want to use double quotations<span class=\"token punctuation\">.</span>'<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I don\\'t want to use double quotations.'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>In the above example, we can use a backslash in front of the ’ in don’t. This tells the compiler that this is not a normal single quotation. If you run the code you will find that the first line doesn’t work but the second line, with the escape character does. Here is a list of some escape sequences:</p>\n<ol>\n<li>\\t = tab</li>\n<li>” = single quote</li>\n<li>’’ = double quote</li>\n</ol>\n<!-- | Escape Sequence | Meaning |\n|---|---|\n| \\newline | Ignored |\n| \\\\\\ | Backslash |\n| \\\\' | Single Quote |\n| \\\\'' | Double Quote |\n| \\t | Tab | -->\n<p>For a list of more escape sequences, see the <a href=\"https://docs.python.org/2.0/ref/strings.html\">official Python documentation</a>{:target=“_blank”}.</p>\n<h4>Triple Quoted Strings</h4>\n<p>You can also use triple quotes (\"\"\") to declare a string. This allows you to put a single (”) and double (\"\") quotations in your string and have it still work. Check out this example.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token triple-quoted-string string\">\"\"\"Hello. This is a double \" quote and this is a single ' quote.\"\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># doesn't work - print(\"\"Hello. This is a double \" quote and this is a single ' quote.\"\")</span></code></pre></div>\n<p>If you test the above code, you will see that the first line runs fine but the second one doesn’t. Important note: You must enclose strings with the same number of quotations. you can have strings like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>\"string'<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token string\">\"string\"</span>\"<span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you try to run the above code, it will fail.</p>\n<h3>Boolean</h3>\n<p>Last up are booleans. A boolean data type will result to true or false. They are used to express truth and have many applications. See the code snippet below to see booleans in action.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    my_boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>my_boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>As you can see from the example, a boolean variable can either be set to “True” or “False”. However, non-boolean objects can be evaluated in a boolean context and can also be true or false.</p>\n<h2>Practice Problems and Programs</h2>\n<p>Like the last tutorial, here are some practice problems to help you understand the concepts covered in this tutorial better.</p>\n<ol>\n<li>Do more research on escape sequences and write a Python program that prints a sentence and uses some of the escape sequences mentioned above or that you found doing your own research.</li>\n<li>Add code to the above program that uses each of the data types discussed above. Declare each data type and try to do something interesting with it. Get creative!</li>\n<li>Finally, take this same program and add comments. Make sure to add your name, the date, and a short description at the top!</li>\n</ol>\n<h2>Conclusion</h2>\n<p>In this article we covered a lot. We looked at variables, commenting, and some different data types. We will put everything in this article into action in the next post. As always be sure to follow me on <a href=\"https://www.instagram.com/benscstutorials/\">instagram</a> and <a href=\"https://twitter.com/benscstutorials/\">twitter</a> and share this post if you found it helpful!</p>\n<!-- ![Chinese Salty Egg](./salty_egg.jpg) -->","frontmatter":{"title":"Python Tutorial 2: Variables, Data Types, and Comments","date":"May 12, 2020","description":"This is the second tutorial of my beginner Python series"}}},"pageContext":{"slug":"/python-tutorial-2/","previous":{"fields":{"slug":"/python-tutorial-1/"},"frontmatter":{"title":"Python Tutorial 1: Your First Python Program"}},"next":null}}}